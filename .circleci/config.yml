# .circleci/config.yml
version: 2.1
orbs:
  macos: circleci/macos@2
  maven: circleci/maven@1.4.0

jobs:
  iOS:
    macos:
      xcode: 14.1.0
    environment:
      JAVA_HOME: /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
    steps:
      - checkout
      - run: |
          xcrun simctl create TestiPhoneX com.apple.CoreSimulator.SimDeviceType.iPhone-X com.apple.CoreSimulator.SimRuntime.iOS-16-1 > deviceid.txt
      - run:
          name: Starting simulator in background
          command: DEVICEUUID=`cat deviceid.txt` && echo $DEVICEUUID && xcrun simctl boot $DEVICEUUID
          background: true
      - run:
          name: Node Version
          command: |
            nvm install v16.18.1 && nvm alias default 16.18.1
      - run:
          name: Install Appium and Run iOS Test
          command: |
            nvm install v16.18.1 && nvm alias default 16.18.1
            brew install --cask homebrew/cask-versions/adoptopenjdk8
            export PATH=$JAVA_HOME/bin:$PATH 
            brew install maven
            node -v 
            npm install -g appium@next
            appium -v
            appium driver install xcuitest
            appium plugin install --source npm appium-device-farm
            appium plugin list
            appium driver list
            Platform='iOS' CONFIG_FILE='./configs/iOSConfig.properties' mvn clean -Dtest=Runner test -Dcheckstyle.skip

  Android:
    machine:
      image: android:202102-01
    # To optimize build times, we recommend "large" and above for Android-related jobs
    resource_class: large
    steps:
      - checkout
      - run:
          name: Create avd
          command: |
            SYSTEM_IMAGES="system-images;android-29;default;x86"
            sdkmanager "$SYSTEM_IMAGES"
            echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
      - run:
          name: Launch emulator 1
          command: |
            emulator -avd test -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          background: true

      - run:
          name: wait for emulator
          command: adb wait-for-device shell 'while [[ -z $(getprop dev.bootcomplete) ]]; do sleep 1; done;'
      - run:
          name: Install Appium and Run Android Test
          command: |
            nvm install v16.18.1 && nvm alias default 16.18.1 
            node -v 
            npm install -g appium@next
            appium -v
            appium driver install uiautomator2
            appium plugin install --source npm appium-device-farm
            appium plugin list
            appium driver list
            Platform='android' CONFIG_FILE='./configs/config.properties' mvn clean -Dtest=Runner test -Dcheckstyle.skip

  AndroidUBUNTU:
    macos:
      xcode: 14.1.0
    environment:
      JAVA_HOME: /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
    steps:
      - checkout
      - run:
          name: set ANDROID_SDK_ROOT
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask homebrew/cask-versions/adoptopenjdk8
            export PATH=$JAVA_HOME/bin:$PATH
            echo 'export ANDROID_SDK_ROOT=$HOME/android-tools'  >> $BASH_ENV

      - restore_cache:
          key: android=tools-v1-{{ checksum "script/circleCI.sh" }}-{{ arch }}

      - run:
          name: install android tools
          command: |
            sh script/circleCI.sh
            echo 'export PATH=$ANDROID_SDK_ROOT/tools/bin:$PATH'  >> $BASH_ENV
            echo 'export PATH=$ANDROID_SDK_ROOT/tools:$PATH'  >> $BASH_ENV
            echo 'export PATH=$ANDROID_SDK_ROOT/platform-tools:$PATH'  >> $BASH_ENV
            echo 'export PATH=$ANDROID_SDK_ROOT/emulator:$PATH'  >> $BASH_ENV
            source $BASH_ENV
            sdkmanager --list

      - save_cache:
          key: android=tools-v1-{{ checksum "script/circleCI.sh" }}-{{ arch }}
          paths:
            - /Users/distiller/android-tools

      - run:
          name: create AVD
          command: |
            echo "no" | avdmanager create avd -n test_device -k 'system-images;android-29;google_apis;x86_64' --force
            echo $ANDROID_HOME/emulator/emulator -list-avds

      - run:
          name: start AVD
          command: emulator -avd test_device -no-snapshot > /dev/null 2>&1 &
          background: true

      - run:
          name: wait for emulator
          command: adb wait-for-device shell 'while [[ -z $(getprop dev.bootcomplete) ]]; do sleep 1; done;'

      - run: adb shell screencap -p > screenshots/before.png

        # (insert testing here)

      - store_artifacts:
          path: screenshots
      - run: echo $ANDROID_HOME
  BrowserStack:
    machine:
      image: android:202102-01
    # To optimize build times, we recommend "large" and above for Android-related jobs
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install Appium and Run Android Test
          command: |
            nvm install v16.18.1 && nvm alias default 16.18.1 
            node -v 
            npm install -g appium@next
            appium -v
            appium plugin install --source npm appium-device-farm
            appium plugin list
            appium driver list
            Platform='android' BS_USERNAME=$user_bs BS_PASSWORD=$pass_bs CONFIG_FILE='./configs/bs_config.properties' mvn clean -Dtest=Runner test -Dcheckstyle.skip

workflows:
  build:
    jobs:
      - AndroidUBUNTU